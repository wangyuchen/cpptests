// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/cpptests.h"
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

// exp_func
double exp_func();
static SEXP cpptests_exp_func_try() {
BEGIN_RCPP
    Rcpp::RObject __result;
    __result = Rcpp::wrap(exp_func());
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP cpptests_exp_func() {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(cpptests_exp_func_try());
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// pmvnorm
double pmvnorm(NumericVector lls, NumericVector uls, NumericVector mu, NumericMatrix sigma);
RcppExport SEXP cpptests_pmvnorm(SEXP llsSEXP, SEXP ulsSEXP, SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type lls(llsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type uls(ulsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type sigma(sigmaSEXP);
    __result = Rcpp::wrap(pmvnorm(lls, uls, mu, sigma));
    return __result;
END_RCPP
}

// validate (ensure exported C++ functions exist before calling them)
static int cpptests_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("double(*exp_func)()");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP cpptests_RcppExport_registerCCallable() { 
    R_RegisterCCallable("cpptests", "cpptests_exp_func", (DL_FUNC)cpptests_exp_func_try);
    R_RegisterCCallable("cpptests", "cpptests_RcppExport_validate", (DL_FUNC)cpptests_RcppExport_validate);
    return R_NilValue;
}
