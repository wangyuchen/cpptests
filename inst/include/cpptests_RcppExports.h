// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef __cpptests_RcppExports_h__
#define __cpptests_RcppExports_h__

#include <Rcpp.h>

namespace cpptests {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("cpptests", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("cpptests", "cpptests_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in cpptests");
            }
        }
    }

    inline double exp_func() {
        typedef SEXP(*Ptr_exp_func)();
        static Ptr_exp_func p_exp_func = NULL;
        if (p_exp_func == NULL) {
            validateSignature("double(*exp_func)()");
            p_exp_func = (Ptr_exp_func)R_GetCCallable("cpptests", "cpptests_exp_func");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_exp_func();
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<double >(__result);
    }

}

#endif // __cpptests_RcppExports_h__
